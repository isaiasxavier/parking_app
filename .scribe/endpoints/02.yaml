name: Parking
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/parkings
    metadata:
      groupName: Parking
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List all parkings.'
      description: |-
        This method retrieves all parking instances, including their related zone and vehicle information.
        It also calculates the total price for each parking session that is still active.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: |-
          {
              "message": "The route api/v1/parkings could not be found."
          }
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5d3acVPZ68gevkEa41bD6hf'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/parkings/history
    metadata:
      groupName: Parking
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'List all stopped parkings.'
      description: |-
        Retrieves all parking sessions, including their related zone and vehicle information, regardless of their status.
        This method is similar to index but does not filter by active sessions.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: |-
          {
              "message": "The route api/v1/parkings/history could not be found."
          }
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer eDV6fc1bE8haa6vP45Zd3kg'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/parkings/start
    metadata:
      groupName: Parking
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Start a new parking session.'
      description: |-
        Validates the incoming request and creates a new parking session if the vehicle is not already in an active session.
        It loads the related vehicle and zone information for the newly created parking session.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      vehicle_id:
        name: vehicle_id
        description: ''
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      zone_id:
        name: zone_id
        description: ''
        required: true
        example: 7
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      vehicle_id: 5
      zone_id: 7
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 3eak65EfD1g8ZacV6h4bvPd'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/parkings/{parking}'
    metadata:
      groupName: Parking
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display a specific parking session.'
      description: |-
        Retrieves and returns information about a specific parking session, including related zone and vehicle information,
        if the session exists and the user has permission to view it.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      parking:
        name: parking
        description: 'The parking.'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      parking: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: |-
          {
              "message": "The route api/v1/parkings/2 could not be found."
          }
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 4e31P5Vvk6gacZfhE6adb8D'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/parkings/{parking}'
    metadata:
      groupName: Parking
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Stop an active parking session.'
      description: |-
        Finds an active parking session by ID and stops it by setting the stop time and calculating the total price.
        It checks if the session exists and if it has not already been stopped.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      parking:
        name: parking
        description: 'The parking.'
        required: true
        example: 12
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      parking: 12
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer DvVP81kdcZf4Eah656aeb3g'
    controller: null
    method: null
    route: null
    custom: []
