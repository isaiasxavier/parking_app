## Autogenerated by Scribe. DO NOT MODIFY.

name: Auth
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/auth/register
    metadata:
      groupName: Auth
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must match the regex /^[\pL\s''\-]+$/u. Must not be greater than 255 characters.'
        required: true
        example: nyapqjpwzkzuh
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 255 characters.'
        required: true
        example: bruen.kelvin@example.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: occaecati
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      name: nyapqjpwzkzuh
      email: bruen.kelvin@example.com
      password: occaecati
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/login
    metadata:
      groupName: Auth
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: ''
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address. Must not be greater than 254 characters.'
        required: true
        example: lora.kautzer@example.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: omnis
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      email: lora.kautzer@example.com
      password: omnis
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/auth/profile
    metadata:
      groupName: Auth
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Exibe as informações do perfil do usuário autenticado.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: |-
          {
              "message": "The route api/v1/auth/profile could not be found."
          }
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          vary: Origin
        description: null
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 5hZ3fPvaeb6aV4cdD61gkE8'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/v1/auth/profile
    metadata:
      groupName: Auth
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Atualiza as informações do perfil do usuário autenticado.'
      description: ''
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must match the regex /^[\pL\s''\-]+$/u. Must be at least 2 characters. Must not be greater than 255 characters.'
        required: true
        example: bvf
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: tbrekke@example.org
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      name: bvf
      email: tbrekke@example.org
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer a4h8VgdcZ3v5aD166efbPkE'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/v1/auth/password
    metadata:
      groupName: Auth
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Atualiza a senha do usuário autenticado.'
      description: |-
        Este método recebe um objeto PasswordUpdateRequest que valida os dados de entrada.
        Primeiro, ele verifica se a nova senha é a mesma que a senha atual. Se for, ele retorna uma resposta JSON com
        uma mensagem de erro e um código de status HTTP 422 (Entidade Não Processável).
        Se a nova senha for diferente da senha atual, ele atualiza a senha do usuário no banco de dados e retorna uma
        resposta JSON com uma mensagem de sucesso e um código de status HTTP 202 (Aceito).
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: ''
        required: true
        example: suscipit
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
      password:
        name: password
        description: ''
        required: true
        example: a
        type: string
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanBodyParameters:
      current_password: suscipit
      password: a
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer gh43e18baE66caVfdZDvkP5'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/auth/logout
    metadata:
      groupName: Auth
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Realiza o logout do usuário autenticado.'
      description: |-
        Este método obtém o usuário autenticado através do helper 'auth()', e então deleta o token de acesso atual.
        Após a deleção do token, ele retorna uma resposta HTTP com status 204 (No Content), indicando que a operação
        foi bem-sucedida e não há conteúdo para retornar.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer aPfv5D4ach6eE16VZd8g3bk'
    controller: null
    method: null
    route: null
    custom: []
